angular.module( 'myAngularWeb', [ 'ngRoute', 'controllers', 'config', 'services', 'ngStorage' ] )
angular.module( 'config', [ ] )
	.config( function( $routeProvider ){
			$routeProvider
				.when('/',{
					templateUrl: 'modules/home/home.html',
				})
				.when('/home',{
					templateUrl: 'modules/home/home.html',
				})
				.when('/specifications/:FILMID',{
					templateUrl: 'modules/specifications/specifications.html',
					controller: 'specificationsController'
				})
				.when('/login',{
					templateUrl: 'modules/login/login.html',
					controller: 'loginController'
				})
				.when('/signin',{
					templateUrl: 'modules/signin/signin.html',
					controller: 'signinController'
				})
				.when('/profile',{
					templateUrl: 'modules/profile/profile.html',
					controller: 'profileController'
				})
				.otherwise({ redirectTo: '/' }); ;
	})
angular.module( 'controllers', [ 'homeModuleCtrl', 'specificationsModuleCtrl', 'loginModuleCtrl', 'signinModuleCtrl', 'profileModuleCtrl' ] )
angular.module( 'services', [ 'homeService', 'specificationsService', 'loginService', 'signinService', 'profileService' ] );
angular.module( 'loginModuleCtrl', [ ] )
	.controller( 'loginController' , function ( $localStorage, $scope, $location, loginService ) {

		$scope.storage = $localStorage;

		console.log($localStorage.token)
		if ($localStorage.token) {
			$location.path( 'profile' )
		}

		$scope.submit = function() {

			var user = {
				userName: $scope.userName,
				userPassword: $scope.userPassword
			}
			console.log('User: '+user.userName+' '+user.userPassword)
			loginService.login( user )
				.then( function( data ) {
					console.log(data)
					if (data.data.success === true) {
						$scope.storage.token = data.data.token;
						console.log($scope.storage.token)
						console.log( 'LOGIN CORRECT' );
						$location.path( 'profile' );
					} else if (data.data.success === false){
						console.log( 'LOGIN INCORRECT' );
						$location.path( 'login' );
						$('.failed-login').css('display', 'block');
					}
				})
		}
	})
angular.module( 'loginService', [ ] )
	.factory('loginService', function( $http ) {
		function login( user ) {
			return $http.post( '/api/authenticate', user )
		}
		return {
			login: login
		}
	})
angular.module( 'signinModuleCtrl', [ ] )
	.controller( 'signinController' , function ( $localStorage, $scope, $location, signinService ) {

		$scope.storage = $localStorage;
		console.log($localStorage.token)
		if ($localStorage.token) {
			$location.path( 'profile' )
		}

		$scope.submit = function() {
			var user = {
				userName: $scope.userName,
				userPassword: $scope.userPassword
			}
			console.log('User: '+user.userName+' '+user.userPassword)
			signinService.signin( user )
				.then( function( data ) {
					console.log(data)
					if (data.data.success === true) {
						$scope.storage.token = data.data.token;
						console.log( 'SIGNIN CORRECT' );
						$location.path( 'myprofile' );
					} else if (data.data.success === false){
						console.log( 'SIGNIN INCORRECT' );
						$location.path( 'signin' );
						$('.failed-signin').css('display', 'block');
					}
				})
		}
	})
angular.module( 'signinService', [ ] )
	.factory('signinService', function( $http ) {
		function signin( user ) {
			console.log('service signin')
			return $http.post( '/new-user', user )
		}
		return {
			signin: signin
		}
	})
angular.module( 'profileModuleCtrl', [ ] )
	.controller( 'profileController' , function ( $localStorage, $scope, $location, profileService ) {

		if (!$localStorage.token) {
			$location.path( 'login' )
		}

		$scope.imageNotFoundCover = '../../img/image-not-found-cover.jpg';
		console.log($localStorage.token)
		$scope.infoFilmSeen = [];

		function parseJwt (token) {
			var base64Url = token.split('.')[1];
			var base64 = base64Url.replace('-', '+').replace('_', '/');
			return JSON.parse(window.atob(base64));
		};

		console.log('in the profileController')

		var infoToken = parseJwt($localStorage.token);
		console.log('paso1: '+infoToken._doc.name)
		var nameUser = {nameUser:infoToken._doc.name}
		profileService.getInfoUser(nameUser)
			.then(function ( userFilmsWatched ){
				console.log('user films seen:'+userFilmsWatched)
				console.log(userFilmsWatched.data)
				if(userFilmsWatched.data.length!==0){
					userFilmsWatched.data.forEach(function(item){
						profileService.getSpecificationsFilm( item )
							.then( function ( dataFilmSearched ){
								console.log(dataFilmSearched)
								$scope.infoFilmSeen.push(dataFilmSearched.data);
							})
					})
				}
			})

		$scope.logout = function(){
			console.log('logout')
			window.location.reload(true);
			localStorage.clear();
		}

	})
angular.module( 'profileService', [ ] )
	.factory('profileService', function( $http ) {

		var urlToSearchFilm = 'http://api.themoviedb.org/3/movie/<ID_MOVIE>?api_key=71bd8c83c5cc06c197435d2165ac52e4';

		function getSpecificationsFilm ( idFilmToSearch ) {
			var urlToSearchFilmChanged = urlToSearchFilm.replace('<ID_MOVIE>', idFilmToSearch)
			console.log(urlToSearchFilmChanged)
			return $http.get( urlToSearchFilmChanged )
		}

		function getInfoUser( nameUser ) {
			console.log('paso2: '+nameUser)
			return $http.post( '/api/info-user', nameUser )
		}


		return {
			getSpecificationsFilm : getSpecificationsFilm,
			getInfoUser : getInfoUser
		}

	})
angular.module( 'homeModuleCtrl', [ ] )
angular.module( 'homeService', [ ] )
angular.module( 'homeModuleCtrl' )
	.controller( 'searcherController' , function ( $rootScope, $scope, $http, searcherService ) {

		$scope.submit = function() {
			$('.questions-to-filter').css('display', 'none');
			$('.list-films').css('display', 'flex')
			$('html, body').animate({
				scrollTop: $('.list-films').offset().top
			}, 1000);
			$('.insert-text').html('<h1>You have searched: <span class="item-searched">' + $scope.filmToSearch + '</span></h1>')

			searcherService.getInfoFilm( $scope.filmToSearch )
				.then( function ( dataFilmSearched ){
					$rootScope.$broadcast('infoFilmSearched', dataFilmSearched.data.results);
				})
		}
	})
angular.module( 'homeService' )
	.factory('searcherService', function( $http ) {

		var urlToSearchFilm = 'http://api.themoviedb.org/3/search/movie?api_key=71bd8c83c5cc06c197435d2165ac52e4&query=<SEARCH>';

		function getInfoFilm ( filmToSearch ) {
			var urlToSearchFilmChanged = urlToSearchFilm.replace('<SEARCH>', filmToSearch)
			return $http.get( urlToSearchFilmChanged )
		}

		return {
			getInfoFilm : getInfoFilm
		}
	})
angular.module( 'homeModuleCtrl' )
	.controller( 'moodsController' , function ( $rootScope, $scope ) {

		$scope.filterSelectedFeelsMood = function( mood ) {
			$('.questions-to-filter').css('display', 'block');
			$('.questions-to-filter').animate({
				'height': '250px',
				'padding': '50px 0 0 -800px'
			}, 1500);
			$('#question1').css('display', 'block');
			$('#question1').delay(1000).animate({
				'padding-left': '950px'
			}, 1000);
			$('#question2').css('display', 'none');
			$('#question3').css('display', 'none');
			$('#question4').css('display', 'none');
			$('.list-films').css('display', 'none');

			var moodFeelingSend = mood;
			$rootScope.$broadcast('moodFeelingSend', moodFeelingSend);
		}

		$('.go-dawn').on('click', function(event){
			event.preventDefault();
			$('html, body').animate({
				scrollTop: $('.to-move-scroll').offset().top
			}, 1500);
		});
	})
angular.module( 'homeModuleCtrl' )
	.controller('listFilmsController', function( $rootScope, $scope ) {
		$scope.imageNotFoundCover = '../../img/image-not-found-cover.jpg';
		$scope.$on('infoFilmSearched', function(evt, message){
			$scope.infoFilmToList = message;
		})
		$scope.$on('infoFilmSearchedByMood', function(evt, message){
			console.log('moods')
			$scope.infoFilmToList = message;
		})
		$('.go-top').on('click', function(event){
			event.preventDefault();
			$('html, body').animate({
				scrollTop: 0 }, 1500);
		});
	})
angular.module( 'homeModuleCtrl' )
	.controller( 'question1Controller' , function ( $rootScope, $scope ) {

		var oMoodsOpposite = {
			Mad: 'Scared',
			Scared: 'Mad',
			Joyful: 'Powerful',
			Powerful: 'Joyful',
			Peaceful: 'Sad',
			Sad: 'Peaceful',
		}

		var moodFeelingRecived = '';
		var moodSearch = '';

		$scope.$on('moodFeelingSend', function(evt, message){
			moodFeelingRecived = message;
		})

		$scope.filterSetMoodFilm = function ( info ) {
			$('#question1').animate({
				'padding-left': '2200px'
			}, 1000).hide(0);
			$('#question2').css('display', 'block');
			$('#question2').delay(1000).animate({
				'padding-left': '950px'
			}, 1000);

			if ( info === 'mood') {
				moodSearch = moodFeelingRecived;
			} else {
				moodSearch = oMoodsOpposite[moodFeelingRecived];
			}

			$rootScope.$broadcast('moodSearchSend', moodSearch);
		}

	})
angular.module( 'homeModuleCtrl' )
	.controller( 'question2Controller' , function ( $rootScope, $scope ) {

		var oTime = {};

		$scope.filterSetDurationFilm = function ( minDuration, maxDuration ) {
			$('#question2').animate({
				'padding-left': '2200px'
			}, 1000).hide(0);
			$('#question3').css('display', 'block');
			$('#question3').delay(1000).animate({
				'padding-left': '950px'
			}, 1000);

			oTime = {
				minTime: minDuration,
				maxTime: maxDuration
			}

			$rootScope.$broadcast('oTimeSend', oTime);
		}
	})
angular.module( 'homeModuleCtrl' )
	.controller( 'question3Controller' , function ( $rootScope, $scope ) {

		var yearLimit = '';

		$scope.filterSetProduced = function ( timeProduced ) {
			$('#question3').animate({
				'padding-left': '2200px'
			}, 1000).hide(0);
			$('#question4').css('display', 'block');
			$('#question4').delay(1000).animate({
				'padding-left': '1150px'
			}, 1000);

			yearLimit = timeProduced;

			$rootScope.$broadcast('yearLimitSend', yearLimit);
		}
	})
angular.module( 'homeModuleCtrl' )
	.controller( 'question4Controller' , function ( $rootScope, $scope, $http, questionsService, $q ) {

		//Predefined values to the Filter
		var numberFilmsToSearch = 6;
		var numVotesMinimum = 10;
		var rateToFilter = 5;
		//Input values of the Filter
		var moodSearchRecived = "";
		var minTimeRecived = "";
		var maxTimeRecived = "";
		var yearLimitRecived = "";

		$scope.$on('moodSearchSend', function(evt, message){
			moodSearchRecived = message;
		})
		$scope.$on('oTimeSend', function(evt, message){
			minTimeRecived = message.minTime;
			maxTimeRecived = message.maxTime;
		})
		$scope.$on('yearLimitSend', function(evt, message){
			yearLimitRecived = message;
		})

		$scope.searchFilmWithFilter = function() {
			$('.list-films').css('display', 'flex')
			$('.insert-text').html('<h1>You have searched: <span class="item-searched">' + moodSearchRecived + '</span></h1>')
			$('#question4 span').html('Repeat the search');
			$('html, body').animate({
				scrollTop: $('.to-move-scroll').offset().top
			}, 1000);

			var moodNumber;
			if ( moodSearchRecived === 'Sad' ) { moodNumber = '80|18|10752';
			} else if ( moodSearchRecived === 'Joyful') { moodNumber = '12|16|35|10751|14|10402|10749';
			} else if ( moodSearchRecived === 'Mad') { moodNumber = '28|80|53|10752';
			} else if ( moodSearchRecived === 'Powerful') { moodNumber = '28|12|14|9648|878|53';
			} else if ( moodSearchRecived === 'Scared') { moodNumber = '80|27|9648';
			} else if ( moodSearchRecived === 'Peaceful') { moodNumber = '99|10751|14|36|10402|10749';
			}

			var aFilmsFiltered = [];

			questionsService.getInfoFilmByMood( moodNumber )
				.then( function( data ) {
					filterFilms( data, moodNumber, aFilmsFiltered )
				})
		}

		function filterFilms ( dataFilmSearched, moodNumber, aFilmsFiltered ) {
			var promisesDetailsFilms = [];
			dataFilmSearched.data.results.forEach(function (item, i) {
				var singleFilmSearched = item;
				if( singleFilmSearched.vote_count >= numVotesMinimum ) {
					if( singleFilmSearched.vote_average >= rateToFilter ){
						var yearShootFilm = singleFilmSearched.release_date.slice(0,4);
						if( yearShootFilm >= yearLimitRecived ) {
							var promise = questionsService.getSpecificationsFilm( singleFilmSearched.id );
							promisesDetailsFilms.push(promise);
						}
					}
				}
			})
			$q.all( promisesDetailsFilms )
				.then( function ( aDataFilmSearched ){
					aDataFilmSearched.forEach( function (item, i) {
						var durationFilm = item.data.runtime;
						if ( durationFilm >= minTimeRecived && durationFilm <= maxTimeRecived ) {
							if( aFilmsFiltered.length < numberFilmsToSearch ) {
								return aFilmsFiltered.push( item.data );
							}
						}
					})
				})
			if ( aFilmsFiltered.length < numberFilmsToSearch ) {
				questionsService.getInfoFilmByMood( moodNumber )
					.then( function( data ) {
						filterFilms( data, moodNumber, aFilmsFiltered )
					})
			}

			$rootScope.$broadcast('infoFilmSearchedByMood', aFilmsFiltered);
		}
	})
angular.module( 'homeService' )
	.factory('questionsService', function( $http ) {

		var urlToSearchFilmByMood = 'https://api.themoviedb.org/3/discover/movie?api_key=71bd8c83c5cc06c197435d2165ac52e4&with_genres=<MOOD_NUM>&page=<PAGE>';

		function getInfoFilmByMood ( moodNumber ) {
			var randomPage = Math.floor(Math.random() * 1000) + 1;
			var mapObj = {
				'<MOOD_NUM>': moodNumber,
				'<PAGE>': randomPage
			};
			var urlToSearchFilmByMoodChanged = urlToSearchFilmByMood.replace(/<MOOD_NUM>|<PAGE>/gi, function(matched){
				return mapObj[matched];
			});

			return promise = $http.get( urlToSearchFilmByMoodChanged )
		}

		// REVISAR - esta petición es la misma que la de specificationsService
		var urlToGetInfoFilm = 'http://api.themoviedb.org/3/movie/<ID_MOVIE>?api_key=71bd8c83c5cc06c197435d2165ac52e4';

		function getSpecificationsFilm ( idFilmToSearch ) {
			var urlToSearchFilmChanged = urlToGetInfoFilm.replace('<ID_MOVIE>', idFilmToSearch)
			return $http.get( urlToSearchFilmChanged ) // return a promise
		}

		return {
			getInfoFilmByMood : getInfoFilmByMood,
			getSpecificationsFilm : getSpecificationsFilm
		}

	})
angular.module( 'specificationsModuleCtrl', [ ] )
	.controller( 'specificationsController' , function ( $scope, $http, $routeParams, specificationsService ) {

		$scope.imageNotFoundCover = '../../img/image-not-found-cover.jpg';
		$scope.imageNotFoundHeaderCover = '../../img/image-not-found-header-cover.jpg';
		$scope.specificationsFilmSearched = "";
		var filmId = $routeParams.FILMID;

		specificationsService.getSpecificationsFilm( filmId )
			.then( function ( dataFilmSearched ){
				$scope.specificationsFilmSearched = dataFilmSearched.data;
			})
	})
angular.module( 'specificationsService', [ ] )
	.factory('specificationsService', function( $http ) {

		var urlToSearchFilm = 'http://api.themoviedb.org/3/movie/<ID_MOVIE>?api_key=71bd8c83c5cc06c197435d2165ac52e4';

		function getSpecificationsFilm ( idFilmToSearch ) {
			var urlToSearchFilmChanged = urlToSearchFilm.replace('<ID_MOVIE>', idFilmToSearch)
			console.log(urlToSearchFilmChanged)
			return $http.get( urlToSearchFilmChanged )
		}

		function postInfoSeenFilms( infoFilmSeen ) {
			console.log(infoFilmSeen)
			return $http.post( '/api/film-seen', infoFilmSeen )
		}

		return {
			getSpecificationsFilm : getSpecificationsFilm,
			postInfoSeenFilms : postInfoSeenFilms
		}

	})
angular.module( 'specificationsModuleCtrl' )
	.controller( 'seeFilmController' , function ( $localStorage, $scope, $http, specificationsService ) {

		$scope.movieSeen = function (idFilm) {
			console.log(idFilm)
			if ($localStorage.token) {
				$('.img-imagotipo').attr("src","../../img/miofilm-imagotipo.png");

				var infoUser = parseJwt($localStorage.token);
				var nameUser = infoUser._doc.name;
				var infoFilmSeen = {
					nameUser: nameUser,
					idFilm: idFilm
				}
				specificationsService.postInfoSeenFilms( infoFilmSeen )
					.then( function( data ) {
						console.log(data)
					})
			} else {
				$('.not-logged').css('display', 'block')
			}
		}

		function parseJwt (token) {
			var base64Url = token.split('.')[1];
			var base64 = base64Url.replace('-', '+').replace('_', '/');
			return JSON.parse(window.atob(base64));
		};
	})