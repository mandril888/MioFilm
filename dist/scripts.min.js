angular.module( 'myAngularWeb', [ 'ngRoute', 'controllers', 'config', 'services', 'ngStorage' ] )
angular.module( 'config', [ ] )
	.config( function( $routeProvider ){
			$routeProvider
				.when('/',{
					templateUrl: 'modules/home/home.html'
				})
				.when('/home',{
					templateUrl: 'modules/home/home.html'
				})
				.when('/specifications/:FILMID',{
					templateUrl: 'modules/specifications/specifications.html'
				})
				// .when('/about',{
				// 	templateUrl: 'modules/about/about.html',
				// 	controller: 'aboutModuleCtrl'
				// })
				.otherwise({ redirectTo: '/' }); ;
	})
angular.module( 'controllers', [ 'homeModuleCtrl', 'specificationsModuleCtrl', 'aboutModuleCtrl', ] )
angular.module( 'services', [ 'homeService', 'specificationsService', 'aboutService' ] );
angular.module( 'aboutModuleCtrl', [ ] )
	.controller( 'aboutController' , function ( $scope ) {
	}) 
angular.module( 'aboutService', [ ] )
	.factory('aboutService', function($http) {
	}) 
angular.module( 'homeModuleCtrl', [ 'homeService' ] )
angular.module( 'homeService', [ ] )
angular.module( 'homeModuleCtrl' )
	.controller( 'searcherController' , function ( $rootScope, $scope, $http, searcherService ) {
		$scope.submit = function() {
			$('.list-films').css('display', 'flex')
			$('.questions-to-filter').css('display', 'none');
			$('html, body').animate({
				scrollTop: $('.to-move-scroll').offset().top
			}, 1000);

			$rootScope.$broadcast('newSearchValue', $scope.filmToSearch);

			searcherService.getInfoFilm( $scope.filmToSearch )
				.then( function ( dataFilmSearched ){
					$rootScope.$broadcast('infoFilmSearched', dataFilmSearched.data.results);
				})
		}
	})
angular.module( 'homeService' )
	.factory('searcherService', function( $http ) {

		var urlToSearchFilm = 'http://api.themoviedb.org/3/search/movie?api_key=71bd8c83c5cc06c197435d2165ac52e4&query=<SEARCH>';

		function getInfoFilm ( filmToSearch ) {
			var urlToSearchFilmChanged = urlToSearchFilm.replace('<SEARCH>', filmToSearch)
			return $http.get( urlToSearchFilmChanged )
		}

		return {
			getInfoFilm : getInfoFilm
		}
	})
angular.module( 'homeModuleCtrl' )
	.controller( 'moodsController' , function ( $scope, $http, moodsService, $q ) {

		$scope.infoFilmSearched = "";

		//Predefined values to the Filter
		var numberFilmsToSearch = 6;
		var numVotesMinimum = 10;
		var rateToFilter = 5;

		//Input values of the Filter
		var moodFeeling = "";
		var moodSearch = "";
		var minTime = "";
		var maxTime = "";
		var yearLimit = "";

		var oMoodsOpposite = {
			Mad: 'Scared',
			Scared: 'Mad',
			Joyful: 'Powerful',
			Powerful: 'Joyful',
			Peaceful: 'Sad',
			Sad: 'Peaceful',
		}

		$scope.filterSelectedFeelsMood = function( mood ) {
			$('.questions-to-filter').css('display', 'block');
			$('.questions-to-filter').animate({
				'height': '250px',
				'padding': '50px 0 0 -800px'
			}, 2000);
			$('#question1').css('display', 'block');
			$('#question1').delay(1000).animate({
				'padding-left': '950px'
			}, 1500);
			$('#question2').css('display', 'none');
			$('#question3').css('display', 'none');
			$('#question4').css('display', 'none');
			$('.list-films').css('display', 'none');

			moodFeeling = mood;
		}

		$scope.filterSetMoodFilm = function ( info ) {
			$('#question1').animate({
				'padding-left': '2200px'
			}, 1500).hide(0).animate({
				'padding-left': '0'
			}, 50);
			$('#question2').css('display', 'block');
			$('#question2').delay(1500).animate({
				'padding-left': '950px'
			}, 1500);

			if ( info === 'mood') {
				moodSearch = moodFeeling;
			} else {
				moodSearch = oMoodsOpposite[moodFeeling];
			}
		}

		$scope.filterSetDurationFilm = function ( minDuration, maxDuration ) {
			$('#question2').animate({
				'padding-left': '2200px'
			}, 1500).hide(0);
			$('#question3').css('display', 'block');
			$('#question3').delay(1500).animate({
				'padding-left': '950px'
			}, 1500);

			minTime = minDuration;
			maxTime = maxDuration;
		}

		$scope.filterSetProduced = function ( timeProduced ) {
			$('#question3').animate({
				'padding-left': '2200px'
			}, 1500).hide(0);
			$('#question4').css('display', 'block');
			$('#question4').delay(1500).animate({
				'padding-left': '1150px'
			}, 1500);

			yearLimit = timeProduced;
		}

		$scope.searchFilmWithFilter = function() {
			$('.list-films').css('display', 'flex')
			$('.insert-text').html('<h1>You have searched: <span class="item-searched">' + moodSearch + '</span></h1>')
			$('.repeat-search').css('display', 'flex')

			var moodNumber;

			if ( moodSearch === 'Sad' ) {
				moodNumber = '80|18|10752';
			} else if ( moodSearch === 'Joyful') {
				moodNumber = '12|16|35|10751|14|10402|10749';
			} else if ( moodSearch === 'Mad') {
				moodNumber = '28|80|53|10752';
			} else if ( moodSearch === 'Powerful') {
				moodNumber = '28|12|14|9648|878|53';
			} else if ( moodSearch === 'Scared') {
				moodNumber = '80|27|9648';
			} else if ( moodSearch === 'Peaceful') {
				moodNumber = '99|10751|14|36|10402|10749';
			}

			var aFilmsFiltered = [];

			homeService.getInfoFilmByMood( moodNumber )
				.then( function( data ) {
					filterFilms( data, moodNumber, aFilmsFiltered )
				})
		}

		function filterFilms ( dataFilmSearched, moodNumber, aFilmsFiltered ) {
			var promisesDetailsFilms = [];
			dataFilmSearched.data.results.forEach(function (item, i) {
				var singleFilmSearched = item;
				if( singleFilmSearched.vote_count >= numVotesMinimum ) {
					if( singleFilmSearched.vote_average >= rateToFilter ){
						var yearShootFilm = singleFilmSearched.release_date.slice(0,4);
						if( yearShootFilm >= yearLimit ) {
							var promise = homeService.getSpecificationsFilm( singleFilmSearched.id );
							promisesDetailsFilms.push(promise);
						}
					}
				}
			})

			$q.all( promisesDetailsFilms )
				.then( function ( aDataFilmSearched ){
					aDataFilmSearched.forEach( function (item, i) {
						var durationFilm = item.data.runtime;
						if ( durationFilm >= minTime && durationFilm <= maxTime ) {
							if( aFilmsFiltered.length < numberFilmsToSearch ) {
								return aFilmsFiltered.push( item.data );
							}
						}
					})
				})


			if ( aFilmsFiltered.length < numberFilmsToSearch ) {
				homeService.getInfoFilmByMood( moodNumber )
					.then( function( data ) {
						filterFilms( data, moodNumber, aFilmsFiltered )
					})
			}

			$scope.infoFilmSearched = aFilmsFiltered;
		}

		$('button').on('click', function(event){
			$('html, body').animate({
				scrollTop: $('.to-move-scroll').offset().top
			}, 500);
		});

		//REVISAR - no pueden ser todos los tags a
		$('a').on('click', function(event){
			event.preventDefault();
			$('html, body').animate({
				scrollTop: $('.to-move-scroll').offset().top
			}, 500);
		});

	})
angular.module( 'homeService' )
	.factory('moodsService', function( $http, $q ) {

		var urlToSearchFilmByMood = 'https://api.themoviedb.org/3/discover/movie?api_key=71bd8c83c5cc06c197435d2165ac52e4&with_genres=<MOOD_NUM>&page=<PAGE>';

		function getInfoFilmByMood ( moodNumber ) {
			var randomPage = Math.floor(Math.random() * 1000) + 1;
			var mapObj = {
				'<MOOD_NUM>': moodNumber,
				'<PAGE>': randomPage
			};
			var urlToSearchFilmByMoodChanged = urlToSearchFilmByMood.replace(/<MOOD_NUM>|<PAGE>/gi, function(matched){
				return mapObj[matched];
			});

			return promise = $http.get( urlToSearchFilmByMoodChanged )
		}


		// REVISAR - esta petici√≥n es la misma que la de specificationsService
		var urlToGetInfoFilm = 'http://api.themoviedb.org/3/movie/<ID_MOVIE>?api_key=71bd8c83c5cc06c197435d2165ac52e4';

		function getSpecificationsFilm ( idFilmToSearch ) {
			var urlToSearchFilmChanged = urlToGetInfoFilm.replace('<ID_MOVIE>', idFilmToSearch)
			return $http.get( urlToSearchFilmChanged ) // return a promise
		}


		return {
			getInfoFilmByMood : getInfoFilmByMood,
			getSpecificationsFilm : getSpecificationsFilm
		}

	})
angular.module( 'homeModuleCtrl' )
	.controller('listFilmsController', function( $rootScope, $scope ) {
		$scope.imageNotFoundCover = '../../img/image-not-found-cover.jpg';
		$scope.$on('newSearchValue', function(evt, message){
			$scope.itemSearched = message;
		})
		$scope.$on('infoFilmSearched', function(evt, message){
			$scope.infoFilmToList = message;
		})
		$('.go-top').on('click', function(event){
			event.preventDefault();
			$('html, body').animate({
				scrollTop: 0 }, 1500);
		});
	})
angular.module( 'specificationsModuleCtrl', [ ] )
	.controller( 'specificationsController' , function ( $scope, $http, $routeParams, specificationsService ) {

		$scope.imageNotFoundCover = '../../img/image-not-found-cover.jpg';
		$scope.imageNotFoundHeaderCover = '../../img/image-not-found-header-cover.jpg';
		$scope.specificationsFilmSearched = "";
		var filmId = $routeParams.FILMID;

		specificationsService.getSpecificationsFilm( filmId )
			.then( function ( dataFilmSearched ){
				$scope.specificationsFilmSearched = dataFilmSearched.data;
			})

	})
angular.module( 'specificationsService', [ ] )
	.factory('specificationsService', function( $http ) {

		var urlToSearchFilm = 'http://api.themoviedb.org/3/movie/<ID_MOVIE>?api_key=71bd8c83c5cc06c197435d2165ac52e4';

		function getSpecificationsFilm ( idFilmToSearch ) {
			var urlToSearchFilmChanged = urlToSearchFilm.replace('<ID_MOVIE>', idFilmToSearch)
			console.log(urlToSearchFilmChanged)
			return $http.get( urlToSearchFilmChanged )
		}

		return {
			getSpecificationsFilm : getSpecificationsFilm
		}

	})